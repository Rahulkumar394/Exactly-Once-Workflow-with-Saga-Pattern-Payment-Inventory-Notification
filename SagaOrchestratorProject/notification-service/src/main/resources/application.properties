# File: notification-service/src/main/resources/application.properties

# Base properties for Notification Service
server.port=8083
spring.application.name=notification-service

# Kafka common settings
# A unique group ID for this service's consumers
spring.kafka.consumer.group-id=notification-group
# Read only committed messages to avoid processing uncommitted data
spring.kafka.consumer.properties.isolation.level=read_committed
# Standard key/value deserializers for Kafka messages
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

# IMPORTANT: This tells the consumer to trust all packages it might receive.
spring.kafka.consumer.properties.spring.json.trusted.packages=*
# THIS IS THE FIX: Explicitly tell the JSON deserializer to map the incoming message to SagaEvent class.
spring.kafka.consumer.properties.spring.json.value.default.type=com.example.common.dtos.SagaEvent

# Kafka Producer settings
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# A unique transactional ID prefix for this service's producers
spring.kafka.producer.transaction-id-prefix=notification-tx-
# Enable idempotence to prevent duplicate messages on retries
spring.kafka.producer.properties.enable.idempotence=true
spring.kafka.producer.retries=3

# ---
# Default profile for local development (not used with Docker Compose)
spring.config.activate.on-profile=default
spring.kafka.bootstrap-servers=localhost:9093

---
# Docker profile, which will be activated by Docker Compose
spring.config.activate.on-profile=docker
# Inside Docker, the service connects to Kafka using its service name 'kafka'.
spring.kafka.bootstrap-servers=${SPRING_KAFKA_BOOTSTRAP_SERVERS}